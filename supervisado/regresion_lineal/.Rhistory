install.packages("tidyverse")
df <- data.frame(x = c(4.27, 3.91, 3.41, 4.21, 4.4, 4.42, 4.41, 4.33), y = c(1566, 750, 707, 808, 1100, 1031, 1299, 1332))
model <- lr(x,y,data=df)
model <- lm(x,y,data=df)
model <- lm(y~x,data=df)
model
summary(model)
install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec()
?file
sample(1:10)
install.packages("tm")
?tm::VectorSource
?tm::Corpus
?cbind
?intersect
?match
install.packages("ramify")
library(ramify)
argmax(c(3,2,1))
argmax(array(3,2,1))
argmax(list(3,2,1))
dim(list(1,2,3))
dim(array(1,2,3))
dim(vector(1,2,3))
dim(vector((1,2,3)))
mat("1,2,3")
argmax(mat("1,2,3"))
argmax(mat("10,2,3"))
argmax(mat("10,20,3"))
paste0(1,2,3)
paste(1,2,3)
paste(1,2,3,sep = ',')
argmax(mat(paste(1,2,3,sep = ',')))
sort(c(paste(1,2,3,sep = ',')))
sort(c(1,2,3))
sort(c(1,2,3),decreasing=TRUE)
sort(c(1,2,3),decreasing=TRUE)
x=c(1,2,3)
which(x==sort(c(1,2,3),decreasing=TRUE)[1]
)
which(x==sort(c(1,2,3),decreasing=TRUE)[1])
which(x==sort(c(1,20,30),decreasing=TRUE)[1])
sort(c(1,20,30),decreasing = T)
sort(c(1,20,30),decreasing = T)[1]
sort(c(1,20,30),decreasing = T)[1] == x
X
x = c(1.20,30)
sort(x,decreasing = T)[1] == x
x
x = c(1,20,30)
sort(x,decreasing = T)[1] == x
which(sort(x,decreasing = T)[1] == x)
x = c(100,20,30)
which(sort(x,decreasing = T)[1] == x)
x = c(10,200,30)
which(sort(x,decreasing = T)[1] == x)
a <- c(1,2)
a <- c(1¿3,4)
a <- c(3,4)
a <- c(1,2)
b <- c(3,4)
b <- c(5,6)
b <- c(3,4)
c <- c(5,6)
c(a,b,c)
mat(a,b,c)
mat(c(a,b,c))
mat(c(a,b,c),nrows=len(a))
mat(c(a,b,c),nrows=length(a))
mat(c(a,b,c),numRows=length(a))
?mat
mattrix(c(a,b,c),nrows=length(a))
matrix(c(a,b,c),nrows=length(a))
?matrix
matrix(c(a,b,c),nrow=length(a))
argmax(matrix(c(a,b,c),nrow=length(a)))
?TermDocumentMatrix
Library(TermDocumentMatrix)
library(TermDocumentMatrix)
install.packages('TermDocumentMatrix')
??TermDocumentMatrix
install.packages("IRkernel")
IRkernel::installspec()
library(languageserver)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages('rtweet')
library('rtweet')
vignet('auth}')
vignet('auth')
vignette('auth')
rtweet_app()
df = data.frame( x = c(1,2,3,4), y = c(199814360.30,191501017.80,210791753.70, 195891102.40))
df
r <- lm(y~x)
r <- lm(y~x, data=df)
r
summary(r)
predict(r, 5)
predict(r, x=c(5))
predict(r, x=c(1:5))
5*752096 + 197619318
set.seed(42)  # Fijar semilla para reproducibilidad
n <- 10000  # Tamaño de la muestra
lambda <- 3  # Parámetro de la distribución de Poisson
datos_poisson <- rpois(n, lambda)
# Calcular la media y la varianza
media_poisson <- mean(datos_poisson)
varianza_poisson <- var(datos_poisson)
media_poisson
varianza_poisson
# Cargar el paquete "ggplot2" para graficar los datos
# install.packages("ggplot2")
library(ggplot2)
# Generar valores de x de manera lineal
x <- 1:100
# Generar valores de y con una relación log-lineal
y <- exp(0.5 + 0.02 * x)  # Coeficientes 0.5 y 0.02 para la relación log-lineal
# Agregar ruido aleatorio a los valores de y
set.seed(42)  # Fijar semilla para reproducibilidad
ruido <- rnorm(length(x), mean = 0, sd = 0.2)  # Ruido aleatorio con media cero y desviación estándar 0.2
y <- y * (1 + ruido)  # Agregar ruido a los valores de y
# Crear un dataframe con los valores de x e y
data <- data.frame(x = x, y = round(y))
# Graficar los datos
ggplot(data, aes(x, y)) +
geom_point() +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal") +
theme_minimal()
# Ajustar un modelo de regresión de Poisson
poisson_model <- glm(y ~ x, data = data, family = poisson)
# Imprimir los resultados del modelo
summary(poisson_model)
plot(poisson())
plot(poisson
)
plot(poisson_model)
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method = "glm", family = poisson, se = FALSE, color = "red") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal()
# Graficar los datos con el suavizado del modelo de regresión de Poisson
# Predecir los valores ajustados del modelo de regresión de Poisson
data$y_pred <- predict(poisson_model, newdata = data, type = "response")
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data, aes(x, y)) +
geom_point() +
geom_line(aes(y = y_pred), color = "red") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal()
set.seed(42)  # Fijar semilla para reproducibilidad
datos_poisson <- rpois(n, lambda)
set.seed(42)  # Fijar semilla para reproducibilidad
n <- 10000  # Tamaño de la muestra
lambda <- 3  # Parámetro de la distribución de Poisson
datos_poisson <- rpois(n, lambda)
# Calcular la media y la varianza
media_poisson <- mean(datos_poisson)
varianza_poisson <- var(datos_poisson)
# Cargar el paquete "ggplot2" para graficar los datos
# install.packages("ggplot2")
library(ggplot2)
x <- 1:100
# Generar valores de y con una relación log-lineal
y <- exp(0.5 + 0.02 * x)  # Coeficientes 0.5 y 0.02 para la relación log-lineal
df = data.frame(X=X, Y=y)
df = data.frame(X=x, Y=y)
ggplot(data=df,aes(X,Y)) +
geom_point()
# Agregar ruido aleatorio a los valores de y
set.seed(42)  # Fijar semilla para reproducibilidad
ruido <- rnorm(length(x), mean = 0, sd = 0.2)  # Ruido aleatorio con media cero y desviación estándar 0.2
y <- y * (1 + ruido)  # Agregar ruido a los valores de y
# Crear un dataframe con los valores de x e y
data <- data.frame(x = x, y = round(y))
# Graficar los datos
ggplot(data, aes(x, y)) +
geom_point() +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal") +
theme_minimal()
# Crear un dataframe con los valores de x e y
data <- data.frame(x = x, y = round(y), y_log=log(y))
# Crear un dataframe con los valores de x e y
data <- data.frame(x = x, y = round(y), y_log=log(round(y)))
# Graficar los datos
ggplot(data, aes(x, y_log)) +
geom_point() +
labs(x = "x", y = "y_log") +
ggtitle("Relación log-lineal") +
theme_minimal()
# Ajustar un modelo de regresión de Poisson
poisson_model <- glm(y ~ x, data = data, family = poisson)
# Imprimir los resultados del modelo
summary(poisson_model)
# Graficar los datos con el suavizado del modelo de regresión de Poisson
# Predecir los valores ajustados del modelo de regresión de Poisson
data$y_pred <- predict(poisson_model, newdata = data, type = "response")
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data, aes(x, y)) +
geom_point() +
geom_line(aes(y = y_pred), color = "red") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal()
old <- par(mfrow = c(2, 2))
plot(reg)
par(old)
linear_model <- lm(y ~ x, data = data)
data$y_pred_rl <- predict(linear_model, newdata = data)
# Graficar los datos con el suavizado del modelo de regresión de Poisson
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data, aes(x, y)) +
a
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data, aes(x, y)) +
geom_point() +
geom_line(aes(y = y_pred), color = "red") +
geom_line(aes(y = y_pred_rl), color = "green") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal(plot(poisson_model))
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data) +
geom_point(aes(x, y)) +
geom_line(aes(y = y_pred), color = "red") +
geom_line(aes(y = y_pred_rl), color = "green") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal(plot(poisson_model))
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data) +
geom_point(aes(x, y)) +
geom_line(aes(y = y_pred), color = "red") +
geom_line(aes(y = y_pred_rl), color = "green") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal()
# Graficar los datos con el suavizado del modelo de regresión de Poisson
ggplot(data,aes(x, y)) +
geom_point() +
geom_line(aes(y = y_pred), color = "red") +
geom_line(aes(y = y_pred_rl), color = "green") +
labs(x = "x", y = "y") +
ggtitle("Relación log-lineal con suavizado de Poisson") +
theme_minimal()
summary(poisson_model)
summary(linear_model)
library(ggplot2)
df <- read.csv('data.csv')
ggplot(data = df, mapping = aes(x = Spent, y = Total_Conversion)) +
geom_point() +
labs(x = "Inversión", y = "Conversiones", title = "Gráfica de dispersión de Conversines vs gasto") +
geom_smooth(method = 'loess', formula = 'y ~ x')
library(ggplot2)
df <- read.csv('data.csv')
setwd("C:/Users/JuanMarmol/cursos/Diplomado ML Mercadotecnia/ml-mkt-2023/supervisado/regresion_lineal")
df <- read.csv('data.csv')
ggplot(data = df, mapping = aes(x = Spent, y = Total_Conversion)) +
geom_point() +
labs(x = "Inversión", y = "Conversiones", title = "Gráfica de dispersión de Conversines vs gasto") +
geom_smooth(method = 'loess', formula = 'y ~ x')
ggplot(data = df) +
geom_point(mapping = aes(x = Spent, y = Total_Conversion)) +
labs(x = "Inversión", y = "Conversiones", title = "Gráfica de dispersión de Conversines vs gasto") +
geom_smooth(mapping = aes(x = Spent, y = Total_Conversion), method = 'lm', formula = 'y ~ x')
reg <- lm(Total_Conversion ~ Spent, data=df)
summary(reg)
old <- par(mfrow = c(2, 2))
plot(reg)
par(old)
reg <- glm(Total_Conversion ~ age + gender + interest + Spent, data=df, family = poisson)
summary(reg)
old <- par(mfrow = c(2, 2))
plot(reg)
par(old)
# Ajustar un modelo de regresión de Poisson
reg <- glm(Total_Conversion ~ Spent, data = df, family = poisson)
# Generar valores predichos del modelo
datos_predichos <- data.frame(
Spent = seq(min(df$Spent), max(df$Spent), length.out = 100)
)
datos_predichos$y_pred <- predict(reg, newdata = datos_predichos, type = "response")
# Crear el gráfico
ggplot(df, aes(x = Spent, y = Total_Conversion)) +
geom_point() +
geom_line(data = datos_predichos, aes(x = Spent, y = y_pred), color = "red") +
labs(x = "Inversión", y = "Conversiones")
old <- par(mfrow = c(2, 2))
plot(reg)
par(old)
# Instalar y cargar los paquetes necesarios
install.packages("tensorflow")
library(tensorflow)
library(ggplot2)
# Generar datos de manera parabólica con ruido gaussiano
set.seed(42)
x <- seq(-5, 5, length.out = 100)
y <- x^2 + rnorm(100, mean = 0, sd = 5)
# Crear un dataframe con los valores de x e y
data <- data.frame(x = x, y = y)
# Definir el modelo
model <- tf$keras$Sequential()
n
tf$initialize()
# Definir el modelo
model <- tf$keras$Sequential()
model$add(tf$keras$layers$Dense(units = 10, activation = "relu", input_shape = 1))
# Instalar y cargar los paquetes necesarios
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
